#include <iostream>
#include <queue>
using namespace std;

const int N = 10;
const int M = 10;

int n, m;
int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};

bool isValid(int x, int y) {
    if (x < 0 || x >= n || y < 0 || y >= m) return false;
    return true;
}

int bfs(int x, int y, int grid[N][M]) {
    queue<pair<int, int>> q;
    q.push({x, y});
    int cnt = 0;
    while (!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        cnt++;
        for (int i = 0; i < 8; i++) {
            int newX = cur.first + dx[i];
            int newY = cur.second + dy[i];
            if (isValid(newX, newY) && grid[newX][newY] != -1) {
                grid[newX][newY] = -1;
                q.push({newX, newY});
            }
        }
    }
    return cnt;
}

int main() {
    cin >> n >> m;
    int grid[N][M];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }
    int x, y;
    cin >> x >> y;
    cout << bfs(x, y, grid) - 1 << endl;
    return 0;
}
